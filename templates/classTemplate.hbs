<?php

namespace s00d\RocksDB;

use Exception;

class RocksDBClient {
    private string $host;
    private int $port;
    private ?string $token;
    private $socket;
    private int $timeout;
    private int $retryInterval;

    /**
     * Constructor to initialize the RocksDB client.
     *
     * @param string $host The host of the RocksDB server.
     * @param int $port The port of the RocksDB server.
     * @param string|null $token Optional authentication token for the RocksDB server.
     */
    public function __construct(string $host, int $port, string $token = null, int $timeout = 20, int $retryInterval = 2) {
        $this->host = $host;
        $this->port = $port;
        $this->token = $token;
        $this->timeout = $timeout;
        $this->retryInterval = $retryInterval;
    }

    /**
     * Connects to the RocksDB server with retry mechanism.
     *
     * @throws Exception If unable to connect to the server.
     */
    private function connect() {
        $startTime = time();

        while (true) {
            $this->socket = @stream_socket_client("tcp://{$this->host}:{$this->port}", $errno, $errstr, 30);

            if ($this->socket) {
                return; // Connection successful
            }

            if (time() - $startTime >= $this->timeout) {
                throw new Exception("Unable to connect to server: $errstr ($errno)");
            }

            // Wait for the retry interval before trying again
            sleep($this->retryInterval);
        }
    }

    /**
     * Sends a request to the RocksDB server.
     *
     * @param array $request The request to be sent.
     * @return array The response from the server.
     * @throws Exception If the response from the server is invalid.
     */
    private function sendRequest(array $request): array {
        if (!$this->socket) {
            $this->connect();
        }

        if ($this->token !== null) {
            $request['token'] = $this->token; // Add token to request if present
        }

        if(isset($request['options']) && empty($request['options'])) {
            unset($request['options']);
        }

        $requestJson = json_encode($request, JSON_THROW_ON_ERROR) . "\n";
        fwrite($this->socket, $requestJson);

        $responseJson = '';
        while (!feof($this->socket)) {
            $responseJson .= fgets($this->socket);
            if (strpos($responseJson, "\n") !== false) {
                break;
            }
        }

        $response = json_decode($responseJson, true, 512, JSON_THROW_ON_ERROR);

        if ($response === null) {
            throw new Exception("Invalid response from server");
        }

        return $response;
    }

    /**
     * Handles the response from the server.
     *
     * @param array $response The response from the server.
     * @return mixed The result from the response.
     * @throws Exception If the response indicates an error.
     */
    private function handleResponse(array $response) {
        if ($response['success']) {
            return $response['result'];
        }

        throw new \RuntimeException($response['error']);
    }

{{{methods}}}
}
